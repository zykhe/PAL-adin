version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: paladin-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-paladin}
      POSTGRES_USER: ${DB_USER:-paladin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - paladin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-paladin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # KeyDB (Redis alternative)
  keydb:
    image: eqalpha/keydb:latest
    container_name: paladin-keydb
    command: keydb-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - keydb_data:/data
    ports:
      - "6379:6379"
    networks:
      - paladin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "keydb-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: paladin-qdrant
    environment:
      QDRANT__SERVICE__HTTP__HOST: 0.0.0.0
      QDRANT__SERVICE__HTTP__PORT: 6333
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - paladin-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: paladin-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-changeme}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - paladin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Ollama (Local AI)
  ollama:
    image: ollama/ollama:latest
    container_name: paladin-ollama
    environment:
      OLLAMA_MODELS: /app/models
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/app/models
    ports:
      - "11434:11434"
    networks:
      - paladin-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: paladin-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - paladin-network
    restart: unless-stopped

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: paladin-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - paladin-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: paladin-backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-paladin}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-paladin}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@keydb:6379
      QDRANT_URL: http://qdrant:6333
      MINIO_ENDPOINT: minio:9000
      OLLAMA_URL: http://ollama:11434
    volumes:
      - ./backend:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    networks:
      - paladin-network
    depends_on:
      - postgres
      - keydb
      - qdrant
      - minio
      - ollama
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (SvelteKit)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: paladin-frontend
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:8000}
      VITE_WS_URL: ${WS_URL:-ws://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - paladin-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev -- --host

volumes:
  postgres_data:
  keydb_data:
  qdrant_data:
  minio_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  paladin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
